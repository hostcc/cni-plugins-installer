---
name: main

on:
  push:

jobs:
  latest-versions:
    name: Upstream versions
    runs-on: ubuntu-latest
    steps:
      - name: Determine upstream versions (up to three)
        id: upstream-versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          latest_versions=$(
            gh api \
              repos/containernetworking/plugins/releases \
              --jq 'map(select(.prerelease==false and .draft==false))|[.[].tag_name]|sort|reverse|[.[range(0,3)]]|@json')
          echo "value=$latest_versions" >> "$GITHUB_OUTPUT"
    outputs:
      latest-versions: ${{ steps.upstream-versions.outputs.value }}

  docker-publish:
    name: Build and publish Docker images
    runs-on: ubuntu-latest
    needs: latest-versions
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ${{ fromJson(needs.latest-versions.outputs.latest-versions) }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up QEMU for more platforms supported by Buildx
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |-
            CNI_PLUGINS_VER=${{ matrix.version }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags:
            ghcr.io/${{ github.repository_owner }}\
            /${{ github.event.repository.name }}\
            :${{ matrix.version }}"
